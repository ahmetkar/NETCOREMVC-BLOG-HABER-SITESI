// <auto-generated />
using System;
using Blog.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Blog.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250405173241_mig6")]
    partial class mig6
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Blog.Entity.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12dd1d68-af34-46a5-ae46-7842d39aed20"),
                            CategoryID = new Guid("58252b86-ec84-4c93-b3df-e9b1bf39d3bf"),
                            Content = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            CreatedBy = "Admin test",
                            CreatedDate = new DateTime(2023, 5, 15, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries..",
                            ImageId = new Guid("17a74024-059f-4747-9849-1ea1613869cc"),
                            IsDeleted = false,
                            Title = "Deneme makale 1",
                            UserId = new Guid("070f54e2-bf16-4d50-bd52-a7f9cd87c479"),
                            ViewCount = 1
                        },
                        new
                        {
                            Id = new Guid("7eb33293-d3fe-4abe-9924-41a64f0138d7"),
                            CategoryID = new Guid("80ac9637-35b9-42d1-afb7-297242e1e7c5"),
                            Content = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            CreatedBy = "Admin test",
                            CreatedDate = new DateTime(2023, 5, 15, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries..",
                            ImageId = new Guid("21c11c2f-b0dd-43f8-bf95-1d0c2940fa2d"),
                            IsDeleted = false,
                            Title = "Deneme makale 2",
                            UserId = new Guid("258794ef-c8f5-4ab5-8818-bcfd3218036a"),
                            ViewCount = 1
                        });
                });

            modelBuilder.Entity("Blog.Entity.Entities.ArticleVisitor", b =>
                {
                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("ArticleId", "VisitorId");

                    b.HasIndex("VisitorId");

                    b.ToTable("ArticleVisitors");
                });

            modelBuilder.Entity("Blog.Entity.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isMenuCategory")
                        .HasColumnType("bit");

                    b.Property<bool>("isPrimeCategory")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58252b86-ec84-4c93-b3df-e9b1bf39d3bf"),
                            CreatedBy = "Admin test",
                            CreatedDate = new DateTime(2023, 5, 15, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Asp.net",
                            isMenuCategory = false,
                            isPrimeCategory = false
                        },
                        new
                        {
                            Id = new Guid("80ac9637-35b9-42d1-afb7-297242e1e7c5"),
                            CreatedBy = "Admin test",
                            CreatedDate = new DateTime(2023, 5, 15, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Visual studio 2022",
                            isMenuCategory = false,
                            isPrimeCategory = false
                        });
                });

            modelBuilder.Entity("Blog.Entity.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("21c11c2f-b0dd-43f8-bf95-1d0c2940fa2d"),
                            CreatedBy = "Admin test",
                            CreatedDate = new DateTime(2023, 5, 15, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            FileName = "images/deneme2",
                            FileType = "png",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("17a74024-059f-4747-9849-1ea1613869cc"),
                            CreatedBy = "Admin test",
                            CreatedDate = new DateTime(2023, 5, 15, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            FileName = "images/deneme",
                            FileType = "png",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Blog.Entity.Entities.TRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e4520f6-4144-4b4c-9724-c651046ee24a"),
                            ConcurrencyStamp = "1b3070bf-c367-4a11-8f78-b142490e04c5",
                            Name = "Superadmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("dddfbe14-bb8f-4c4f-af4e-c1be34ea9b88"),
                            ConcurrencyStamp = "b376286f-f1a9-4847-8ca2-ccb2b83fdb19",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("b20731ee-51ed-4849-8d24-82d4a998edda"),
                            ConcurrencyStamp = "0f6f2ddd-e251-4723-9660-d11684367737",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Blog.Entity.Entities.TRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Blog.Entity.Entities.TUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("69bffe8d-6794-45d2-bd0f-48599928cdee"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fac64d41-92d7-4ac1-bb9b-88e3a0e5101f",
                            Email = "ahmetkar2346@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            ImageId = new Guid("21c11c2f-b0dd-43f8-bf95-1d0c2940fa2d"),
                            LastName = "Kar",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMETKAR2346@GMAIL.COM",
                            NormalizedUserName = "AHMETKAR",
                            PasswordHash = "AQAAAAIAAYagAAAAEG/Ft1JNtQTl5R1IhAjkohZM7XiBWuK4r2dBdoJmjSt5Dnnuprb3tAhNuJL4TLYZjA==",
                            PhoneNumber = "+905308152000",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "5b93a1a4-7694-4f4a-a313-cc2c1bdc7f39",
                            TwoFactorEnabled = false,
                            UserName = "ahmetkar"
                        },
                        new
                        {
                            Id = new Guid("258794ef-c8f5-4ab5-8818-bcfd3218036a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "467cb568-285c-4b24-9cb6-2fcef7c4263e",
                            Email = "ahmetkar2077@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            ImageId = new Guid("21c11c2f-b0dd-43f8-bf95-1d0c2940fa2d"),
                            LastName = "Oz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMETKAR2077@GMAIL.COM",
                            NormalizedUserName = "MEHMETOZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEJVcbyWB2Zi0slADuY4d7wV6VdnLnEW4pd1g3vUCO7FixTDiUnVUmxlS8MYZmaWtDA==",
                            PhoneNumber = "+905308142441",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b0c6258-92e2-4a9b-bae5-c057fac1fab9",
                            TwoFactorEnabled = false,
                            UserName = "mehmetoz"
                        },
                        new
                        {
                            Id = new Guid("070f54e2-bf16-4d50-bd52-a7f9cd87c479"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2e35093d-56b3-47d9-a7c1-26729d02cf64",
                            Email = "farukdemir123@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Faruk",
                            ImageId = new Guid("21c11c2f-b0dd-43f8-bf95-1d0c2940fa2d"),
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "FARUKDEMIR123@GMAIL.COM",
                            NormalizedUserName = "FARUKDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEEPYxQXRWnnIh0119PtaAUP7QAJVpUyoTL2rov+1zZiFBtv6XvCrJ+IZoB9BH38sKA==",
                            PhoneNumber = "+905308132112",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e045542f-3c3d-43ae-8fc3-a3df3227d20e",
                            TwoFactorEnabled = false,
                            UserName = "farukdemir"
                        });
                });

            modelBuilder.Entity("Blog.Entity.Entities.TUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Blog.Entity.Entities.TUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Blog.Entity.Entities.TUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("69bffe8d-6794-45d2-bd0f-48599928cdee"),
                            RoleId = new Guid("0e4520f6-4144-4b4c-9724-c651046ee24a")
                        },
                        new
                        {
                            UserId = new Guid("258794ef-c8f5-4ab5-8818-bcfd3218036a"),
                            RoleId = new Guid("dddfbe14-bb8f-4c4f-af4e-c1be34ea9b88")
                        },
                        new
                        {
                            UserId = new Guid("070f54e2-bf16-4d50-bd52-a7f9cd87c479"),
                            RoleId = new Guid("b20731ee-51ed-4849-8d24-82d4a998edda")
                        });
                });

            modelBuilder.Entity("Blog.Entity.Entities.TUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Blog.Entity.Entities.Visitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("Blog.Entity.Entities.Article", b =>
                {
                    b.HasOne("Blog.Entity.Entities.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog.Entity.Entities.Image", "Image")
                        .WithMany("Articles")
                        .HasForeignKey("ImageId");

                    b.HasOne("Blog.Entity.Entities.TUser", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blog.Entity.Entities.ArticleVisitor", b =>
                {
                    b.HasOne("Blog.Entity.Entities.Article", "Article")
                        .WithMany("ArticleVisitors")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog.Entity.Entities.Visitor", "Visitor")
                        .WithMany("ArticleVisitors")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("Blog.Entity.Entities.TRoleClaim", b =>
                {
                    b.HasOne("Blog.Entity.Entities.TRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blog.Entity.Entities.TUser", b =>
                {
                    b.HasOne("Blog.Entity.Entities.Image", "Image")
                        .WithMany("Users")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Blog.Entity.Entities.TUserClaim", b =>
                {
                    b.HasOne("Blog.Entity.Entities.TUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blog.Entity.Entities.TUserLogin", b =>
                {
                    b.HasOne("Blog.Entity.Entities.TUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blog.Entity.Entities.TUserRole", b =>
                {
                    b.HasOne("Blog.Entity.Entities.TRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog.Entity.Entities.TUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blog.Entity.Entities.TUserToken", b =>
                {
                    b.HasOne("Blog.Entity.Entities.TUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blog.Entity.Entities.Article", b =>
                {
                    b.Navigation("ArticleVisitors");
                });

            modelBuilder.Entity("Blog.Entity.Entities.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Blog.Entity.Entities.Image", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Blog.Entity.Entities.TUser", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Blog.Entity.Entities.Visitor", b =>
                {
                    b.Navigation("ArticleVisitors");
                });
#pragma warning restore 612, 618
        }
    }
}
